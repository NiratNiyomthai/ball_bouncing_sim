import turtle


class Paddle:
    def __init__(self, x_position):
        self.paddle = turtle.Turtle()
        self.paddle.speed(0)
        self.paddle.shape("square")
        self.paddle.color("white")
        self.paddle.shapesize(stretch_wid=6, stretch_len=1)
        self.paddle.penup()
        self.paddle.goto(x_position, 0)
        self.moving_up = False
        self.moving_down = False

    def move(self):
        if self.moving_up and self.paddle.ycor() < 250:
            self.paddle.sety(self.paddle.ycor() + .5)
        if self.moving_down and self.paddle.ycor() > -240:
            self.paddle.sety(self.paddle.ycor() - .5)

    def start_move_up(self):
        self.moving_up = True

    def stop_move_up(self):
        self.moving_up = False

    def start_move_down(self):
        self.moving_down = True

    def stop_move_down(self):
        self.moving_down = False

    def ycor(self):
        return self.paddle.ycor()

    def xcor(self):
        return self.paddle.xcor()


class Ball:
    def __init__(self):
        self.ball = turtle.Turtle()
        self.ball.speed(40)
        self.ball.shape("circle")
        self.ball.color("white")
        self.ball.penup()
        self.ball.goto(0, 0)
        self.ball.dx = 0.1
        self.ball.dy = 0.1

    def move(self):
        self.ball.setx(self.ball.xcor() + self.ball.dx)
        self.ball.sety(self.ball.ycor() + self.ball.dy)

    def bounce_y(self):
        self.ball.dy *= -1

    def bounce_x(self):
        self.ball.dx *= -1

    def reset_position(self):
        self.ball.goto(0, 0)
        self.bounce_x()

    def xcor(self):
        return self.ball.xcor()

    def ycor(self):
        return self.ball.ycor()

    def setx(self, x):
        self.ball.setx(x)

    def sety(self, y):
        self.ball.sety(y)


class Scoreboard:
    def __init__(self):
        self.left_score = 0
        self.right_score = 0
        self.display = turtle.Turtle()
        self.display.speed(0)
        self.display.color("white")
        self.display.penup()
        self.display.hideturtle()
        self.display.goto(0, 260)
        self.update_score()

    def update_score(self):
        self.display.clear()
        self.display.write(f"Player A: {self.left_score}  Player B: {self.right_score}",
                           align="center", font=("Courier", 24, "normal"))

    def increase_left_score(self):
        self.left_score += 1
        self.update_score()

    def increase_right_score(self):
        self.right_score += 1
        self.update_score()


class PongGame:
    def __init__(self):
        self.screen = turtle.Screen()
        self.screen.title("Pong Game")
        self.screen.bgcolor("black")
        self.screen.setup(width=800, height=600)
        self.screen.tracer(0)

        self.left_paddle = Paddle(-350)
        self.right_paddle = Paddle(350)
        self.ball = Ball()
        self.scoreboard = Scoreboard()

        self.screen.listen()
        self.screen.onkeypress(self.left_paddle.start_move_up, "w")
        self.screen.onkeyrelease(self.left_paddle.stop_move_up, "w")
        self.screen.onkeypress(self.left_paddle.start_move_down, "s")
        self.screen.onkeyrelease(self.left_paddle.stop_move_down, "s")
        self.screen.onkeypress(self.right_paddle.start_move_up, "Up")
        self.screen.onkeyrelease(self.right_paddle.stop_move_up, "Up")
        self.screen.onkeypress(self.right_paddle.start_move_down, "Down")
        self.screen.onkeyrelease(self.right_paddle.stop_move_down, "Down")

    def play(self):
        while True:
            self.screen.update()

            # Move paddles
            self.left_paddle.move()
            self.right_paddle.move()

            # Move the ball
            self.ball.move()

            # Ball collision with top wall
            if self.ball.ycor() > 290:
                self.ball.sety(290)
                self.ball.bounce_y()

            # Ball collision with bottom wall
            if self.ball.ycor() < -290:
                self.ball.sety(-290)
                self.ball.bounce_y()

            # Ball collision with right paddle
            if (340 < self.ball.xcor() < 350) and \
               (self.right_paddle.ycor() - 50 < self.ball.ycor() < self.right_paddle.ycor() + 50):
                self.ball.setx(340)
                self.ball.bounce_x()

            # Ball collision with left paddle
            if (-350 < self.ball.xcor() < -340) and \
               (self.left_paddle.ycor() - 50 < self.ball.ycor() < self.left_paddle.ycor() + 50):
                self.ball.setx(-340)
                self.ball.bounce_x()

            # Ball out of bounds (right side)
            if self.ball.xcor() > 390:
                self.scoreboard.increase_left_score()
                self.ball.reset_position()

            # Ball out of bounds (left side)
            if self.ball.xcor() < -390:
                self.scoreboard.increase_right_score()
                self.ball.reset_position()


# Run the game
if __name__ == "__main__":
    game = PongGame()
    game.play()
